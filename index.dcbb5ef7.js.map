{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = $a5fd07fa01589658$var$Game.defaultState()){\n        this.score = 0;\n        this.status = \"idle\";\n        this.initialState = this.cloneState(initialState);\n        this.state = this.cloneState(initialState);\n        this.size = initialState.length;\n    }\n    static defaultState() {\n        return Array.from({\n            length: 4\n        }, ()=>Array(4).fill(0));\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        if (this.status === \"idle\") {\n            this.status = \"playing\";\n            this.addRandomTile();\n            this.addRandomTile();\n        }\n    }\n    restart() {\n        this.state = this.cloneState(this.initialState);\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    addRandomTile() {\n        const emptyTiles = this.getEmptyTiles();\n        if (emptyTiles.length > 0) {\n            const randomIndex = Math.floor(Math.random() * emptyTiles.length);\n            const [row, col] = emptyTiles[randomIndex];\n            this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    move(direction) {\n        if (this.status !== \"playing\") return;\n        const moveMade = this.performMove(direction);\n        if (moveMade) {\n            this.addRandomTile();\n            this.checkGameState();\n        }\n    }\n    moveRight() {\n        this.move(\"right\");\n    }\n    moveLeft() {\n        this.move(\"left\");\n    }\n    moveUp() {\n        this.move(\"up\");\n    }\n    moveDown() {\n        this.move(\"down\");\n    }\n    hasEmptyCells() {\n        return this.getEmptyTiles().length > 0;\n    }\n    canCombine() {\n        for(let row = 0; row < this.size; row++)for(let col = 0; col < this.size; col++){\n            const currentValue = this.state[row][col];\n            if (col < this.size - 1 && currentValue === this.state[row][col + 1]) return true;\n            if (row < this.size - 1 && currentValue === this.state[row + 1][col]) return true;\n        }\n        return false;\n    }\n    checkGameState() {\n        for (const row of this.state)if (row.includes(2048)) {\n            this.status = \"win\";\n            return;\n        }\n        if (!this.hasEmptyCells() && !this.canCombine()) this.status = \"lose\";\n    }\n    performMove(direction) {\n        const previousState = this.cloneState(this.state);\n        const newState = [];\n        const isVertical = direction === \"up\" || direction === \"down\";\n        const isReverse = direction === \"right\" || direction === \"down\";\n        const rows = isVertical ? this.transposeState(this.state) : this.state;\n        for (const row of rows){\n            const line = isReverse ? [\n                ...row\n            ].reverse() : row;\n            const combined = this.combineRow(line);\n            const padded = this.padRow(combined);\n            const final = isReverse ? padded.reverse() : padded;\n            newState.push(final);\n        }\n        this.state = isVertical ? this.transposeState(newState) : newState;\n        return !this.areStatesEqual(previousState, this.state);\n    }\n    combineRow(row) {\n        const combinedRow = [];\n        const numbers = row.filter((n)=>n !== 0);\n        for(let i = 0; i < numbers.length; i++)if (numbers[i] === numbers[i + 1]) {\n            const merged = numbers[i] * 2;\n            combinedRow.push(merged);\n            this.score += merged;\n            i++;\n        } else combinedRow.push(numbers[i]);\n        return combinedRow;\n    }\n    padRow(row) {\n        return [\n            ...row,\n            ...Array(this.size - row.length).fill(0)\n        ];\n    }\n    cloneState(state) {\n        return state.map((row)=>[\n                ...row\n            ]);\n    }\n    areStatesEqual(state1, state2) {\n        for(let row = 0; row < state1.length; row++)for(let col = 0; col < state1[row].length; col++){\n            if (state1[row][col] !== state2[row][col]) return false;\n        }\n        return true;\n    }\n    transposeState(state) {\n        return state[0].map((_, colIndex)=>state.map((row)=>row[colIndex]));\n    }\n    getEmptyTiles() {\n        const emptyTiles = [];\n        for(let row = 0; row < this.size; row++){\n            for(let col = 0; col < this.size; col++)if (this.state[row][col] === 0) emptyTiles.push([\n                row,\n                col\n            ]);\n        }\n        return emptyTiles;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$cells = Array.from(document.querySelectorAll(\".field-cell\"));\nconst $09e991522ca7e64e$var$buttonStart = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$scoreElement = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$messageWinElement = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLoseElement = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageStartElement = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$keyActions = {\n    ArrowLeft: ()=>$09e991522ca7e64e$var$game.moveLeft(),\n    ArrowRight: ()=>$09e991522ca7e64e$var$game.moveRight(),\n    ArrowUp: ()=>$09e991522ca7e64e$var$game.moveUp(),\n    ArrowDown: ()=>$09e991522ca7e64e$var$game.moveDown()\n};\nconst $09e991522ca7e64e$var$handleKeyDown = (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    const action = $09e991522ca7e64e$var$keyActions[e.key];\n    if (action) {\n        action();\n        $09e991522ca7e64e$var$updateView();\n    }\n};\nconst $09e991522ca7e64e$var$updateCellsView = ()=>{\n    const state = $09e991522ca7e64e$var$game.getState().flat();\n    $09e991522ca7e64e$var$cells.forEach((cell, index)=>{\n        const cellValue = state[index];\n        cell.className = \"field-cell\";\n        cell.textContent = cellValue || \"\";\n        if (cellValue) cell.classList.add(`field-cell--${cellValue}`);\n    });\n};\nconst $09e991522ca7e64e$var$updateScoreView = ()=>{\n    $09e991522ca7e64e$var$scoreElement.textContent = $09e991522ca7e64e$var$game.getScore();\n};\nconst $09e991522ca7e64e$var$updateGameStatusView = ()=>{\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    if (gameStatus === \"win\") $09e991522ca7e64e$var$messageWinElement.classList.remove(\"hidden\");\n    if (gameStatus === \"lose\") $09e991522ca7e64e$var$messageLoseElement.classList.remove(\"hidden\");\n};\nconst $09e991522ca7e64e$var$updateView = ()=>{\n    $09e991522ca7e64e$var$updateCellsView();\n    $09e991522ca7e64e$var$updateScoreView();\n    $09e991522ca7e64e$var$updateGameStatusView();\n};\nconst $09e991522ca7e64e$var$resetMessages = ()=>{\n    [\n        $09e991522ca7e64e$var$messageWinElement,\n        $09e991522ca7e64e$var$messageLoseElement,\n        $09e991522ca7e64e$var$messageStartElement\n    ].forEach((msg)=>{\n        msg.classList.add(\"hidden\");\n    });\n};\nconst $09e991522ca7e64e$var$startNewGame = ()=>{\n    if ($09e991522ca7e64e$var$buttonStart.classList.contains(\"restart\")) $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$resetMessages();\n    $09e991522ca7e64e$var$updateView();\n    $09e991522ca7e64e$var$buttonStart.textContent = \"Restart\";\n    $09e991522ca7e64e$var$buttonStart.className = \"button restart\";\n};\ndocument.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyDown);\n$09e991522ca7e64e$var$buttonStart.addEventListener(\"click\", $09e991522ca7e64e$var$startNewGame);\n\n\n//# sourceMappingURL=index.dcbb5ef7.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst cells = Array.from(document.querySelectorAll('.field-cell'));\nconst buttonStart = document.querySelector('.button.start');\nconst scoreElement = document.querySelector('.game-score');\nconst messageWinElement = document.querySelector('.message-win');\nconst messageLoseElement = document.querySelector('.message-lose');\nconst messageStartElement = document.querySelector('.message-start');\n\nconst keyActions = {\n  ArrowLeft: () => game.moveLeft(),\n  ArrowRight: () => game.moveRight(),\n  ArrowUp: () => game.moveUp(),\n  ArrowDown: () => game.moveDown(),\n};\n\nconst handleKeyDown = (e) => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  const action = keyActions[e.key];\n\n  if (action) {\n    action();\n    updateView();\n  }\n};\n\nconst updateCellsView = () => {\n  const state = game.getState().flat();\n\n  cells.forEach((cell, index) => {\n    const cellValue = state[index];\n\n    cell.className = 'field-cell';\n    cell.textContent = cellValue || '';\n\n    if (cellValue) {\n      cell.classList.add(`field-cell--${cellValue}`);\n    }\n  });\n};\n\nconst updateScoreView = () => {\n  scoreElement.textContent = game.getScore();\n};\n\nconst updateGameStatusView = () => {\n  const gameStatus = game.getStatus();\n\n  if (gameStatus === 'win') {\n    messageWinElement.classList.remove('hidden');\n  }\n\n  if (gameStatus === 'lose') {\n    messageLoseElement.classList.remove('hidden');\n  }\n};\n\nconst updateView = () => {\n  updateCellsView();\n  updateScoreView();\n  updateGameStatusView();\n};\n\nconst resetMessages = () => {\n  [messageWinElement, messageLoseElement, messageStartElement].forEach(\n    (msg) => {\n      msg.classList.add('hidden');\n    },\n  );\n};\n\nconst startNewGame = () => {\n  if (buttonStart.classList.contains('restart')) {\n    game.restart();\n  }\n\n  game.start();\n  resetMessages();\n  updateView();\n  buttonStart.textContent = 'Restart';\n  buttonStart.className = 'button restart';\n};\n\ndocument.addEventListener('keydown', handleKeyDown);\nbuttonStart.addEventListener('click', startNewGame);\n","'use strict';\n\nclass Game {\n  constructor(initialState = Game.defaultState()) {\n    this.score = 0;\n    this.status = 'idle';\n    this.initialState = this.cloneState(initialState);\n    this.state = this.cloneState(initialState);\n    this.size = initialState.length;\n  }\n\n  static defaultState() {\n    return Array.from({ length: 4 }, () => Array(4).fill(0));\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    if (this.status === 'idle') {\n      this.status = 'playing';\n      this.addRandomTile();\n      this.addRandomTile();\n    }\n  }\n\n  restart() {\n    this.state = this.cloneState(this.initialState);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  addRandomTile() {\n    const emptyTiles = this.getEmptyTiles();\n\n    if (emptyTiles.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyTiles.length);\n      const [row, col] = emptyTiles[randomIndex];\n\n      this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  move(direction) {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const moveMade = this.performMove(direction);\n\n    if (moveMade) {\n      this.addRandomTile();\n      this.checkGameState();\n    }\n  }\n\n  moveRight() {\n    this.move('right');\n  }\n  moveLeft() {\n    this.move('left');\n  }\n  moveUp() {\n    this.move('up');\n  }\n  moveDown() {\n    this.move('down');\n  }\n\n  hasEmptyCells() {\n    return this.getEmptyTiles().length > 0;\n  }\n\n  canCombine() {\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        const currentValue = this.state[row][col];\n\n        if (col < this.size - 1 && currentValue === this.state[row][col + 1]) {\n          return true;\n        }\n\n        if (row < this.size - 1 && currentValue === this.state[row + 1][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  checkGameState() {\n    for (const row of this.state) {\n      if (row.includes(2048)) {\n        this.status = 'win';\n\n        return;\n      }\n    }\n\n    if (!this.hasEmptyCells() && !this.canCombine()) {\n      this.status = 'lose';\n    }\n  }\n\n  performMove(direction) {\n    const previousState = this.cloneState(this.state);\n    const newState = [];\n\n    const isVertical = direction === 'up' || direction === 'down';\n    const isReverse = direction === 'right' || direction === 'down';\n\n    const rows = isVertical ? this.transposeState(this.state) : this.state;\n\n    for (const row of rows) {\n      const line = isReverse ? [...row].reverse() : row;\n      const combined = this.combineRow(line);\n      const padded = this.padRow(combined);\n      const final = isReverse ? padded.reverse() : padded;\n\n      newState.push(final);\n    }\n\n    this.state = isVertical ? this.transposeState(newState) : newState;\n\n    return !this.areStatesEqual(previousState, this.state);\n  }\n\n  combineRow(row) {\n    const combinedRow = [];\n    const numbers = row.filter((n) => n !== 0);\n\n    for (let i = 0; i < numbers.length; i++) {\n      if (numbers[i] === numbers[i + 1]) {\n        const merged = numbers[i] * 2;\n\n        combinedRow.push(merged);\n        this.score += merged;\n        i++;\n      } else {\n        combinedRow.push(numbers[i]);\n      }\n    }\n\n    return combinedRow;\n  }\n\n  padRow(row) {\n    return [...row, ...Array(this.size - row.length).fill(0)];\n  }\n\n  cloneState(state) {\n    return state.map((row) => [...row]);\n  }\n\n  areStatesEqual(state1, state2) {\n    for (let row = 0; row < state1.length; row++) {\n      for (let col = 0; col < state1[row].length; col++) {\n        if (state1[row][col] !== state2[row][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  transposeState(state) {\n    return state[0].map((_, colIndex) => state.map((row) => row[colIndex]));\n  }\n\n  getEmptyTiles() {\n    const emptyTiles = [];\n\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this.state[row][col] === 0) {\n          emptyTiles.push([row, col]);\n        }\n      }\n    }\n\n    return emptyTiles;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$var$Game","constructor","initialState","defaultState","score","status","cloneState","state","size","length","Array","from","fill","getScore","getState","getStatus","start","addRandomTile","restart","emptyTiles","getEmptyTiles","randomIndex","Math","floor","random","row","col","move","direction","performMove","checkGameState","moveRight","moveLeft","moveUp","moveDown","hasEmptyCells","canCombine","currentValue","includes","previousState","newState","isVertical","isReverse","transposeState","line","reverse","combined","combineRow","padded","padRow","final","push","areStatesEqual","combinedRow","numbers","filter","n","i","merged","map","state1","state2","_","colIndex","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$cells","document","querySelectorAll","$09e991522ca7e64e$var$buttonStart","querySelector","$09e991522ca7e64e$var$scoreElement","$09e991522ca7e64e$var$messageWinElement","$09e991522ca7e64e$var$messageLoseElement","$09e991522ca7e64e$var$messageStartElement","$09e991522ca7e64e$var$keyActions","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","$09e991522ca7e64e$var$updateCellsView","flat","forEach","cell","index","cellValue","className","textContent","classList","add","$09e991522ca7e64e$var$updateScoreView","$09e991522ca7e64e$var$updateGameStatusView","gameStatus","remove","$09e991522ca7e64e$var$updateView","$09e991522ca7e64e$var$resetMessages","msg","addEventListener","e","action","key","contains"],"version":3,"file":"index.dcbb5ef7.js.map"}